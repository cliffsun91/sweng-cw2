#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{babel}






\usepackage{babel}




\usepackage{babel}
\end_preamble
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding latin9
\fontencoding T1
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 0
\use_mathdots 0
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 4cm
\rightmargin 2cm
\bottommargin 4cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Software Engineering CW2
\end_layout

\begin_layout Author
Abhijit Chandgadkar, Osama Javed, Joseph Slade, Cliff Sun, Luke Tomlin
\end_layout

\begin_layout Date
06/12/12
\end_layout

\begin_layout Section*
Process
\end_layout

\begin_layout Standard
Acting as a small team tackling a completely unfamiliar codebase, we took
 several steps towards implementing the desired goal, keeping in mind extra
 aims to improve the existing code, make it maintainable and make it extendable.
\end_layout

\begin_layout Subsection*
Adding unit tests for existing functionality
\end_layout

\begin_layout Paragraph*
What
\end_layout

\begin_layout Standard
Whilst we had many ideas for improving the code itself, the most important
 part was to make sure that we did not affect the existing functionality
 beyond what we were asked to change, effectively 'freezing' the current
 functionality.
 To do this, we began adding unit tests that tested the existing functionality,
 so that we could easily verify that our changes were not breaking anything.
 This was the first step to making the code maintainable, much like we did
 in the first lecture tutorial (Legacy Code).
 We decided to use 
\begin_inset Formula $JUnit4$
\end_inset

 to do our unit testing, with some help from 
\begin_inset Formula $JMock$
\end_inset

.
\end_layout

\begin_layout Paragraph*
How
\end_layout

\begin_layout Standard
We had aspirations to restructure the project to make it more easily maintainabl
e - this meant that we had to add tests for all of the areas that we were
 planning to touch.
 As an example, the project specification had us editing the 
\begin_inset Formula $BillingSystem$
\end_inset

 class.
 Upon inspection, we decided what responsibilities this class had: 
\end_layout

\begin_layout Itemize
Registers calls starting and ending between numbers 
\end_layout

\begin_layout Itemize
Processes these calls and applies them as bills to the corresponding customers
 from the customer database
\end_layout

\begin_deeper
\begin_layout Itemize
In doing so, it reads the tariff rates and uses them with some algorithm
 (which we were changing in the specification) to decide the final cost
 of the call.
 
\end_layout

\end_deeper
\begin_layout Standard
Judging from these responsibilities, we added a variety of unit tests covering
 basic and edge cases for each responsibility.
 For instance, for 
\begin_inset Formula $callInitiated$
\end_inset

 and 
\begin_inset Formula $callCompleted$
\end_inset

, we added tests to make sure that the specified events were added to the
 log.
 Additionally, we fabricated some customer calls, with predefined times,
 and tested these making sure that the resulting bill was equivalent to
 what we expected.
 These calls were designed to cover all of the edge cases as well, such
 as calls over peak time to off peak time and vice versa, and calls of zero
 length, as well as extremely long calls.
 As an example, here is where we check the functionality of the 
\begin_inset Formula $Call$
\end_inset

 class: 
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

final Mockery context = new Mockery(); 	
\end_layout

\begin_layout Plain Layout

final CallEvent callStart = context.mock(CallEvent.class, "CallEvent1"); 	
\end_layout

\begin_layout Plain Layout

final CallEvent callEnd = context.mock(CallEvent.class, "CallEvent2"); 	
\end_layout

\begin_layout Plain Layout

final Call call = new Call(callStart, callEnd); 
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

@Test 	
\end_layout

\begin_layout Plain Layout

public void testGetCalleeGetsCalleeFromCallStart(){ 		
\end_layout

\begin_layout Plain Layout

	final String callee = "Cliff"; 	
\end_layout

\begin_layout Plain Layout

	context.checking(new Expectations() {{             
\end_layout

\begin_layout Plain Layout

		oneOf(callStart).getCallee(); 
\end_layout

\begin_layout Plain Layout

		will(returnValue(callee));         
\end_layout

\begin_layout Plain Layout

	}}); 	
\end_layout

\begin_layout Plain Layout

	Assert.assertThat(call.callee(), CoreMatchers.equalTo(callee));	 	
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Forming specifications for new functionality
\end_layout

\begin_layout Standard
In our project with Stephen, our entire project goals had been specified
 by mouth only! As we saw in week 5 of the lecture (Spec by Example), this
 is quite risky - we might completely misinterpret what Stephen meant, and
 end up wasting time in the process.
 To remedy this, we decided to create a simple DSL using JUnit, with which
 we created some acceptance tests.
 This meant that the tests were easily readable, simple to write, and were
 simple to demonstrate to Stephen and other non-developers as an example
 of expected operation.
 The results of these tests could also be printed as a normal bill.
\end_layout

\begin_layout Paragraph*
Acceptance tests
\end_layout

\begin_layout Standard
Writing acceptance tests is crucial for both development and the business.
 For developers it provides validation that a particular feature works across
 the whole system.
 For the business it tells them that the feature has been successfully imple
 mented and can be released to production.
 In our case, it is important to write acceptance tests f or the new functionali
ty that we are required to implement, it allows our customer Stephen to
 see whether new functionality works and lets him know the progress of developme
nt.
 However we are also trying to add tests to the legacy code and so it is
 also important to write acceptance tests for the current functionality
 as well.
\end_layout

\begin_layout Paragraph*
How
\end_layout

\begin_layout Standard
Using parts of week 6's lectures (DSLs), we developed our own DSL to perform
 the acceptance tests.
 Below is an example of one of the tests
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

// Creating a new customer database
\end_layout

\begin_layout Plain Layout

customerDatabase = createNewDatabaseWithCustomers(
\end_layout

\begin_layout Plain Layout

	aCustomer(
\end_layout

\begin_layout Plain Layout

		named("James"),  	
\end_layout

\begin_layout Plain Layout

		withTelephoneNumber("+447567891234"),  					   													
\end_layout

\begin_layout Plain Layout

		withTariffPlan("Standard")), 					   									  
\end_layout

\begin_layout Plain Layout

	aCustomer(
\end_layout

\begin_layout Plain Layout

		named("Fred"),  					   									
\end_layout

\begin_layout Plain Layout

		withTelephoneNumber("+447912345678"),  					   							
\end_layout

\begin_layout Plain Layout

		withTariffPlan("Standard")
\end_layout

\begin_layout Plain Layout

	)
\end_layout

\begin_layout Plain Layout

);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Testing the final bill printed
\end_layout

\begin_layout Plain Layout

givenAcmeTelecom().hasCustomerDatabase(customerDatabase).
\end_layout

\begin_layout Plain Layout

	andHasABillingSystem(
\end_layout

\begin_layout Plain Layout

	billingSystem().withTelephoneCalls(telephoneCalls)
\end_layout

\begin_layout Plain Layout

				   .withABillPrinter(aStandardPrinter())
\end_layout

\begin_layout Plain Layout

	).
\end_layout

\begin_layout Plain Layout

	weExpectTheFollowingBillToBePrinted("foo").assertResult();
\end_layout

\end_inset

The benefits of such an acceptance test system are immediately obvious -
 it lets someone without any prior knowledge of how Java works or of how
 the system is set up, understand what the tests are doing - a developer
 could run through this code with Stephen or any other project manager,
 and change the acceptance tests (and ultimately the code itself to adhere
 to the tests).
 This was built up using a combination of builder patterns (for building
 the tests from the DSL), fixtures (for running the tests), and microtypes
 (to make the DSL more readable).
 
\end_layout

\begin_layout Paragraph*
Choice
\end_layout

\begin_layout Standard
We can choose a variety of acceptance test frameworks to write out tests
 with.
 Frameworks like Behave, FIT and Cucumber are well supported and widely
 used but often come with a lot of setting up nd have features that are
 not necessary.
 Especially in our case as we only need to test that we charge the correct
 amount depending on the peak period.
 So in our case it would be beneficial to write out own DSL to create acceptance
 tests with.
 We also use the JUnit framework to create our internal Domain Specific
 Language which we will then use to write the acceptance tests.
 The advantage is that we can run the acceptance tests along with the unit
 tests and means it works well if we were to use continuous integration.
 Also, as we are doing this in an IDE, we have the advantages of auto-complete
 / content assist and syntax checking.
\end_layout

\begin_layout Subsection*
Adding unit tests for new functionality
\end_layout

\begin_layout Standard
Before we could implement the required changes, we wanted to add unit tests
 to cover what the expected outcome was going to be, as an example of Test-Drive
n Development.
 This meant that we could repeatedly test the code as we implemented it
 to ensure that the desired goal was being fulfilled.
 We had to think carefully about what exactly to test, to make sure that
 it completely covered every aspect of our goals.
 We implemented the tests using the DSL that we developed earlier, effectively
 connecting the new functionality tests with the specifications that we
 were showing to Stephen.
\end_layout

\begin_layout Paragraph*
How
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

@Test     
\end_layout

\begin_layout Plain Layout

public void testCallCostWithStandardTariff() throws Exception {     	
\end_layout

\begin_layout Plain Layout

	PeakOffPeakTime peakOffPeakTime = new PeakOffPeakTime(100, 200);     	
\end_layout

\begin_layout Plain Layout

	Tariff tariff = Tariff.Standard;     	
\end_layout

\begin_layout Plain Layout

	BigDecimal cost = 
\end_layout

\begin_layout Plain Layout

		new DefaultCallCostCalculator().calculateCost(peakOffPeakTime, tariff);
 	Assert.assertEquals(cost.longValue(), 90);     
\end_layout

\begin_layout Plain Layout

}	
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Implementing new functionality
\end_layout

\begin_layout Standard
By this point we were fairly confident that we had a good grasp of the existing
 functionality that we needed to preserve, cemented by unit tests, as well
 as a good vision of what we needed to add/change, supported by the unit
 tests written in the DSL (which we would have cleared with Stephen).
\end_layout

\begin_layout Paragraph*
What
\end_layout

\begin_layout Standard
We needed to tweak how the calls were charged, which involved understanding
 exactly how long a call was in peak and offpeak periods and tallying the
 results accordingly.
 This involved recoding how 
\begin_inset Formula $BillingSystem$
\end_inset

 worked, as well as moving and/or adding functionality to 
\begin_inset Formula $DaytimePeakPeriod$
\end_inset

.
\end_layout

\begin_layout Paragraph*
How
\end_layout

\begin_layout Standard
We created a new package called timeutils, which abstracted the required
 peak/offpeak time calculations out from the billing system.
 Careful consideration went into building the package, making sure that
 it would be easily scalable and configurable.
 For instance, we added the ability to define different xml files for peak/offpe
ak configuration, which are read in at run-time, and they also allow multiple
 peak and offpeak times to be specified for the same day.
\end_layout

\begin_layout Standard
Originally we considered making the time calculation methods static, to
 improve performance - however after rethinking the issue we decided to
 use interfaces and objects as this is much easier to scale and extend.
 If the underlying implementation needs to change at any point (eg.
 implementing a different kind of calculator), as long as they abide by
 the interface rules everything will still work.
 
\end_layout

\begin_layout Standard
This package was developed in a test-driven-development style - unit tests
 were specified once the planning had finished, and were coded to cover
 the entire scope of the specification.
 The result of this was that we could be confident that the required functionali
ty was intact as we went about developing the package.
\end_layout

\begin_layout Standard
The end result was a change in how 
\begin_inset Formula $BillingSystem$
\end_inset

 worked, as well as removing a lot of the responsibility that it previously
 had.
 It fundamentally performed the same task, however it now did so more efficientl
y, and in a much clearer and concise manner.
\end_layout

\begin_layout Subsection*
Refactoring and improving code to aid maintainability and code health
\end_layout

\begin_layout Standard
The existing code had multiple problems that we aimed to fix over the course
 of the project.
 These were not all related to the goals set out by Stephen, but as we would
 be looking after the codebase for the forseeable future we decided that
 it would be wise to improve the general health of the codebase to reduce
 headaches later.
 Some examples: 
\end_layout

\begin_layout Itemize
The 
\begin_inset Formula $DaytimePeakPeriod$
\end_inset

 class, which handled deciding whether calls were onpeak or offpeak, was
 very rigidly implemented.
 The times for the boundary between offpeak and peak were defined as 
\begin_inset Quotes eld
\end_inset

magic numbers
\begin_inset Quotes erd
\end_inset

 inside the code (in this case as 7 and 19, representing 7am and 7pm respectivel
y).
 This left no room for providing flexible peak and offpeak times without
 directly editing the class itself.
 Additionally, if different tariffs could have different peak times, perhaps
 changing more than once throughout the day, it would require a whole overhaul
 of the class.
 
\end_layout

\begin_layout Itemize
The 
\begin_inset Formula $CallStart$
\end_inset

 and 
\begin_inset Formula $CallEnd$
\end_inset

 classes, used 
\begin_inset Formula $System.currentTimeMillis$
\end_inset

 to get the time of call and end.
 This made testing difficult - to construct a call using this implementation
 would require the test to 
\begin_inset Formula $sleep$
\end_inset

 inbetween calling and ending the call, which would make the testing process
 very slow indeed! This occurs in the 
\begin_inset Formula $Runner$
\end_inset

 example provided in the specification - it takes a full 1 minute and 50
 seconds to complete!
\end_layout

\begin_layout Itemize
The 
\begin_inset Formula $BillingSystem$
\end_inset

 was responsible for registering and handling 
\begin_inset Formula $CallEvent$
\end_inset

 happenings, which we felt was somewhat outside of its domain of responsibility.
 We felt that a system that is designed for billing should handle just that
 - it should take a list of pre-assembled calls, and work out the bills
 from that.
 
\end_layout

\begin_layout Itemize
Additionally, the 
\begin_inset Formula $BillingSystem$
\end_inset

 was woefully inefficient at creating the bills for customers.
 In the original state, it would iterate through every customer, and then
 through every 
\begin_inset Formula $CallEvent$
\end_inset

 that had been logged, and assemble each call that way.
 Assuming the system has 
\begin_inset Formula $1000$
\end_inset

 customers, and each customer makes 
\begin_inset Formula $100$
\end_inset

 calls over the course of the month, that means each customer adds 
\begin_inset Formula $200$
\end_inset

 different events to the 
\begin_inset Formula $callLog$
\end_inset

, for a total of 
\begin_inset Formula $200000$
\end_inset

 call events.
 That means that the 
\begin_inset Formula $BillingSystem$
\end_inset

 makes a total of 
\begin_inset Formula $1000\, customers\times200000\, events=200,000,000$
\end_inset

 iterations to assemble one bill for all of its customers! Even generating
 a single bill takes 
\begin_inset Formula $20000$
\end_inset

 iterations, making this system very difficult to scale.
 This isn't even the worst case - the way the system is designed, it searches
 the whole 
\begin_inset Formula $callLog$
\end_inset

 every time!
\end_layout

\begin_layout Paragraph*
How
\end_layout

\begin_layout Standard
We performed many different changes to the code, with the aim to fix the
 above problems, or at least make them more manageable.
 Some of the main things we changed include:
\end_layout

\begin_layout Subparagraph*
Call Events
\end_layout

\begin_layout Standard
We added an 
\begin_inset Formula $AbstractCallEvent$
\end_inset

 as an abstract interface implementing the 
\begin_inset Formula $CallEvent$
\end_inset

 interface, and then changed 
\begin_inset Formula $CallStart$
\end_inset

 and 
\begin_inset Formula $CallEnd$
\end_inset

 to implement this.
 This let us write tests a lot easier (rather than having to rely on 
\begin_inset Formula $sleep$
\end_inset

!), by letting us fabricate times as we wanted and then test it using the
 standard functions.
 Additionally, we implemented the common 
\begin_inset Formula $getCaller$
\end_inset

 and 
\begin_inset Formula $getCallee$
\end_inset

 methods that were being duplicated in both 
\begin_inset Formula $CallStart$
\end_inset

 and 
\begin_inset Formula $CallEnd$
\end_inset

 inside the 
\begin_inset Formula $AbstractCallEvent$
\end_inset

 class, reducing the code size and making it easier to read.
 As an example, this reduced the 
\begin_inset Formula $CallStart$
\end_inset

 class to simply being
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

public class CallEnd extends AbstractCallEvent {
\end_layout

\begin_layout Plain Layout

	public CallEnd(String caller, String callee) {
\end_layout

\begin_layout Plain Layout

		super(caller, callee, System.currentTimeMillis());
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subparagraph*
BillingSystem
\end_layout

\begin_layout Standard
With the 
\begin_inset Formula $BillingSystem$
\end_inset

 class, we made a lot of changes.
 From the performance perspective, we moved the calculation of bills from
 call events to happen as the calls come in - this made it far more efficient
 when bill generation was required, effectively making it linear in size
 of customer base as compared to polynomial! From the structure perspective,
 as mentioned above, we moved a lot of the functionality elsewhere and made
 its responsibilities more specific.
 Additionally, we added a large amount of extra functionality to the existing
 system, such as allowing for flexible peak/offpeak time periods, or even
 multiple peak/offpeak time periods! These can be defined at run-time using
 xml, and were implemented using the 
\begin_inset Formula $JAXB$
\end_inset

 java architecture for xml bindings.
 Basic validation of these files is done at runtime to ensure that they
 are properly formed, and helps prevent user-created errors.
\end_layout

\begin_layout Subparagraph*
Joda Time
\end_layout

\begin_layout Standard
One big change that we made to the code was to introduce Joda Time (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://joda-time.sourceforge.net/
\end_layout

\end_inset

) in place of 
\begin_inset Formula $java.util.Date$
\end_inset

.
 This had many advantages, above and beyond simply being easier to use.
 It has a lot more flexibilty and power than 
\begin_inset Formula $Date,$
\end_inset

 allowing us to work dates and times in a more concise manner without having
 to wrestle with 
\begin_inset Formula $Calendars$
\end_inset

 and 
\begin_inset Formula $SimpleDateFormat$
\end_inset

 classes.
 Another big thing to consider was the fact that 
\begin_inset Formula $SimpleDateFormat$
\end_inset

 is not thread safe! As handling dates and times is so integral to the code,
 if we wanted to implement any sort of multi-threading functionality to
 the code we would have to completely remove 
\begin_inset Formula $SimpleDateFormat$
\end_inset

.
 
\end_layout

\begin_layout Section*
Statistics
\end_layout

\begin_layout Standard
dependency diagram, test-coverage
\end_layout

\begin_layout Section*
Considerations
\end_layout

\begin_layout Standard
Whilst we were implementing the required changes and tweaking the codebase,
 we thought of a variety of other considerations that should be considered.
 We also implemented some of these whilst we were coding, but some of the
 other ones were outside the scope of the coursework itself, but should
 have been considered in the theoretical Acme Telecom scenario.
\end_layout

\begin_layout Subsection*
Source control
\end_layout

\begin_layout Standard
When we first received the code from Stephen, it was simply emailed as a
 tarball.
 Keeping the code like this was definitely sub-optimal, so we decided to
 host it in some form of source control (in our project we used GitHub for
 ease of use - but in the context of Acme Telecom we would most likely have
 used a private version!).
 This made collaboration between the team members much easier, as well as
 keeping a timeline of changes made to allow rollbacks.
\end_layout

\begin_layout Subsection*
Architecture changes
\end_layout

\begin_layout Standard
We made multiple architectural changes to the code over the course of the
 project - we altered where some of the files were placed, based on responsibili
ties, as well as adding testing (acceptance or unit-based) and resource
 directories.
 For instance, we moved calling-based and call-event-based classes away
 from normal telecom-based classes into a seperate package, moved the entirety
 of offpeak/peak cal calculations out to a seperate utils class, amongst
 other things, modularising the codebase and making it easier for multiple
 people to work on different areas of the program, as well as making the
 code conceptually easier to understand.
 
\end_layout

\begin_layout Paragraph*
Wrappers
\end_layout

\begin_layout Standard
We found that testing was a little bit challenging, as the customer database
 that was supplied to us was located outside of the package.
 We considered creating a wrapper around the functionality of the database,
 which we could use as an interface to create dummies of the database for
 testing and mocking without having to touch the 'real' databases whilst
 doing tests.
 However, we didn't have enough time to fully implement these wrappers,
 as the underlying functionality that it would need to fulfill was too complicat
ed for us to get a grasp of in a short time-frame.
 Fortunately this doesn't translate too badly into real life, as the database
 accesses that are performed from the tests are minor, but this could be
 problematic if the databases are ever down and we need to do tests!
\end_layout

\begin_layout Subsection*
Multi-Threading
\end_layout

\begin_layout Standard
The act of generating multiple bills appears to lend itself quite well to
 a multi-threaded approach.
 Each bill being generated could be classified as a unit of operation, and
 the whole process could be split across multiple computers.
 We did not get around to implementing multithreading to the system, but
 it would certainly be something to consider in the future if running time
 ever became a problem.
 
\end_layout

\begin_layout Subsection*
Licensing
\end_layout

\begin_layout Standard
Some care needed to be used when thinking about what OpenSource software
 we wanted to use.
 If any of these had a 'viral' license (such as the GNU General Public License),
 which require all derivative works to also be licensed with the GPL, then
 the whole project itself would have to be licensed with the GPL! This might
 prove to be problematic in a private company with proprietary software,
 as they most likely do not want competitors to be able to freely use their
 software.
 We had to consider this risk when deciding to use Joda Time, for instance.
 Fortunately, Joda Time uses the Apache 2 license, which is not 'viral'
 and only requires that derivative work contains notifications of what was
 changed, as well as retaining all other copyright, patent, trademark notices
 etc.
 that existed in the original.
\end_layout

\begin_layout Standard
Maven also helps us with licensing - it can keep track of license for different
 parts of the projects, and notify us of clashes in licensing.
 
\end_layout

\begin_layout Subsection*
Building
\end_layout

\begin_layout Standard
For build automation we decided to use Maven, as the team was already mostly
 familiar with its usage from previous tutorials, and because of how well
 it licensingtied in with TeamCity for continuous integration.
 Additionally, it allowed the import of our project as a dependency, so
 it could be easily used in other projects (such as extensions of the billing
 system or similar).
\end_layout

\begin_layout Subsection*
Deployment
\end_layout

\begin_layout Standard
Whilst we did not actually implement any deployment mechanisms, we did consider
 what deployment mechanisms would be appropriate for Acme Telecom in the
 case of this product.
 Given the suite of tests that we created testing for both the new and the
 old functionality, and our use of Maven and git for source control and
 building, we thought that it would be best to use TeamCity, much like we
 did in week 7's tutorial (Release).
 It would be fairly simple to set up as we already had git and Maven configured,
 and assuming that management was happy with the quality of the tests that
 we put in place, would make releasing very simple and quick.
 We assumed that the Acme company has access to its own set of servers,
 and we would use those to deploy on.
\end_layout

\begin_layout Standard
Maven also acts as a form of internal deployment - it lets us deploy to
 an internal 'Maven repository'.
 Internal users who wish to use the latest version of our project simply
 add the project as a dependency to their project, and Maven then automatically
 imports the latest version of the jars and sets it up.
\end_layout

\end_body
\end_document
